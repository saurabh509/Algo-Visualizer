{"version":3,"sources":["logo.svg","SortingVisualizer/MergeSort.js","SortingVisualizer/QuickSort.js","SortingVisualizer/SortingVisualizer.jsx","SortingVisualizer/SelectionSort.js","SortingVisualizer/BubbleSort.js","SortingVisualizer/Footer.jsx","SortingVisualizer/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","console","log","quickSort","arr","startIndex","endIndex","midIndex","pivotVal","index","partition","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","window","innerWidth","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","props","state","this","resetArray","min","max","innerHeight","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","innerHTML","whatTODo","n","tmp","getSelectionSortAnimations","temp","getBubbleSortAnimations","className","map","value","idx","id","onClick","mergeSort","selectionSort","bubbleSort","React","Component","Footer","Header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1aabac21.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export function getMergeSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  const auxiliaryArray = array.slice();\r\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n  mainArray,\r\n  startIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  if (startIdx === endIdx) return;\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n  mainArray,\r\n  startIdx,\r\n  middleIdx,\r\n  endIdx,\r\n  auxiliaryArray,\r\n  animations,\r\n) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n  while (i <= middleIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[i]]);\r\n    mainArray[k++] = auxiliaryArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, auxiliaryArray[j]]);\r\n    mainArray[k++] = auxiliaryArray[j++];\r\n  }\r\n}","const animations = [];\r\n\r\nexport function getQuickSortAnimations(array) {\r\n\r\n    console.log(array);\r\n    \r\n    quickSort(array, 0, array.length - 1);\r\n\r\n    return animations;\r\n\r\n}\r\n\r\nfunction partition(arr, startIndex, endIndex) {\r\n    const pivotVal = arr[endIndex]; // the pivot element\r\n    let index = startIndex;\r\n    // begin iterate and swap\r\n    for (let i = index; i < endIndex; i++) {\r\n        animations.push([-1,i,endIndex]);\r\n        animations.push([-2,i,endIndex]);\r\n        if (arr[i] < pivotVal) {\r\n            animations.push([-1,i,index,arr[index]]);\r\n            animations.push([-2,i,index,arr[index]]);\r\n            animations.push([-2,index,i,arr[i]]);\r\n            animations.push([-2,i,index]);\r\n            [arr[i], arr[index]] = [arr[index], arr[i]];\r\n            index += 1;\r\n        }\r\n    }\r\n\r\n    // move `pivotVal` to the middle index and return middle index\r\n    if(index !== endIndex){\r\n        animations.push([-1,index,endIndex,arr[endIndex]]);\r\n        animations.push([-2,index,endIndex,arr[endIndex]]);\r\n        animations.push([-2,endIndex,index,arr[index]]);\r\n        animations.push([-2,index,endIndex]);\r\n        [arr[index], arr[endIndex]] = [arr[endIndex], arr[index]];\r\n    }\r\n    return index;\r\n}\r\n  \r\nfunction quickSort(arr, startIndex, endIndex) {\r\n    // Base case or terminating case\r\n    if (startIndex >= endIndex) {\r\n        return;\r\n    }\r\n\r\n    // Returns midIndex / pivot index\r\n    let midIndex = partition(arr, startIndex, endIndex);\r\n\r\n    // Recursively apply the same logic to the left and right subarrays\r\n    quickSort(arr, startIndex, midIndex - 1);\r\n    quickSort(arr, midIndex + 1, endIndex);\r\n}\r\n  \r\n//   let arr = [-2, 4, 6, 3, 7, 2];","import React from 'react';\r\nimport {getBubbleSortAnimations} from './BubbleSort.js';\r\nimport {getMergeSortAnimations} from './MergeSort.js';\r\nimport { getSelectionSortAnimations} from './SelectionSort.js';\r\nimport { getQuickSortAnimations} from './QuickSort.js';\r\nimport './SortingVisualizer.css';\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 100;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = Math.floor(window.innerWidth/ 54);\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(25, window.innerHeight/1.5));\r\n    }\r\n    this.setState({array});\r\n    // location.reload();\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n          // document.getElementById('value-div').innerHTML=`${newHeight}`;\r\n          arrayBars[barOneIdx].innerHTML=`${newHeight}`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    const animations = getQuickSortAnimations(this.state.array);\r\n    console.log(animations);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      // console.log(arrayBars);\r\n      // const isColorChange = i % 4 < 2;\r\n\r\n      // console.log(W);\r\n      if (animations[i].length < 4) {\r\n        // const[W,x,y]=animations[i];\r\n        const [whatTODo,barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        // const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        if(whatTODo === -1){\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n            barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n          }, i * ANIMATION_SPEED_MS);\r\n          // isPrimary=1-isPrimary;\r\n        }\r\n        else{\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n          }, i * ANIMATION_SPEED_MS);\r\n          // isPrimary=1-isPrimary;\r\n        }\r\n      } else {\r\n        const [whatTODo,barOneIdx,barTwoIdx, newHeight] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        if(whatTODo === -2){\r\n        setTimeout(() => {\r\n            barOneStyle.height = `${newHeight}px`;\r\n            arrayBars[barOneIdx].innerHTML=`${newHeight}`;\r\n          }, i * ANIMATION_SPEED_MS);\r\n        }\r\n        else{\r\n          setTimeout(()=>{\r\n            barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n            barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n          },i * ANIMATION_SPEED_MS);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  selectionSort() {\r\n\r\n    // let isPrimary=1;\r\n    const animations = getSelectionSortAnimations(this.state.array);\r\n    console.log(animations);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      // console.log(arrayBars);\r\n      // const isColorChange = i % 4 < 2;\r\n\r\n      // console.log(W);\r\n      if (animations[i].length < 4) {\r\n        // const[W,x,y]=animations[i];\r\n        const [whatTODo,barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        // const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        if(whatTODo === -1){\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n            barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n          }, i * ANIMATION_SPEED_MS);\r\n          // isPrimary=1-isPrimary;\r\n        }\r\n        else{\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n          }, i * ANIMATION_SPEED_MS);\r\n          // isPrimary=1-isPrimary;\r\n        }\r\n      } else {\r\n        const [whatTODo,barOneIdx,barTwoIdx, newHeight] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        if(whatTODo === -2){\r\n        setTimeout(() => {\r\n            barOneStyle.height = `${newHeight}px`;\r\n            arrayBars[barOneIdx].innerHTML=`${newHeight}`;\r\n          }, i * ANIMATION_SPEED_MS);\r\n        }\r\n        else{\r\n          setTimeout(()=>{\r\n            barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n            barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n          },i * ANIMATION_SPEED_MS);\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  bubbleSort() {\r\n    const animations = getBubbleSortAnimations(this.state.array);\r\n    console.log(animations);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName('array-bar');\r\n      // console.log(arrayBars);\r\n      // const isColorChange = i % 4 < 2;\r\n\r\n      // console.log(W);\r\n      if (animations[i].length < 4) {\r\n        // const[W,x,y]=animations[i];\r\n        const [whatTODo,barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        // const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        if(whatTODo === -1){\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n            barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n          }, i * ANIMATION_SPEED_MS);\r\n          // isPrimary=1-isPrimary;\r\n        }\r\n        else{\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n            barTwoStyle.backgroundColor = PRIMARY_COLOR;\r\n          }, i * ANIMATION_SPEED_MS);\r\n          // isPrimary=1-isPrimary;\r\n        }\r\n      } else {\r\n        const [whatTODo,barOneIdx,barTwoIdx, newHeight] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        if(whatTODo === -2){\r\n        setTimeout(() => {\r\n            barOneStyle.height = `${newHeight}px`;\r\n            arrayBars[barOneIdx].innerHTML=`${newHeight}`;\r\n          }, i * ANIMATION_SPEED_MS);\r\n        }\r\n        else{\r\n          setTimeout(()=>{\r\n            barOneStyle.backgroundColor = SECONDARY_COLOR;\r\n            barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n          },i * ANIMATION_SPEED_MS);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {array} = this.state;\r\n\r\n    return (\r\n      <div>\r\n      <div className=\"array-container\">\r\n        {array.map((value, idx) => (\r\n          <div\r\n            className=\"array-bar\"\r\n            id='value-div'\r\n            key={idx}\r\n            style={{\r\n              backgroundColor: PRIMARY_COLOR,\r\n              height: `${value}px`,\r\n            }}>{value}</div>\r\n        ))}\r\n      </div>\r\n      <div className='array-buttons'>\r\n        <button className=\"btn btn-sm btn-outline-info\" onClick={() => this.resetArray()}>Generate New Array</button>\r\n        <button className=\"btn btn-sm btn-outline-info\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n        <button className=\"btn btn-sm btn-outline-info\" onClick={() => this.quickSort()}>Quick Sort</button>\r\n        <button className=\"btn btn-sm btn-outline-info\" onClick={() => this.selectionSort()}>Selection Sort</button>\r\n        <button className=\"btn btn-sm btn-outline-info\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\r\nfunction randomIntFromInterval(min, max) {\r\n  // min and max included\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","export function getSelectionSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    \r\n    let n = array.length;\r\n        \r\n    for(let i = 0; i < n; i++) {\r\n        // Finding the smallest number in the subarray\r\n        let min = i;\r\n        for(let j = i+1; j < n; j++){\r\n            animations.push([-1,i,j])\r\n            animations.push([-2,i,j])\r\n            if(array[j] < array[min]) {\r\n                min=j; \r\n            }\r\n         }\r\n         if (min !== i) {\r\n             // Swapping the elements\r\n             animations.push([-1,i,min,array[min]]);\r\n             animations.push([-2,i,min,array[min]]);\r\n             animations.push([-2,min,i,array[i]]);\r\n             animations.push([-2,i,min]);\r\n             let tmp = array[i]; \r\n             array[i] = array[min];\r\n             array[min] = tmp;      \r\n        }\r\n    }\r\n\r\n    return animations;\r\n}","export function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    \r\n    for(let i = 0; i < array.length; i++){\r\n     \r\n        // Last i elements are already in place  \r\n        for(let j = 0; j < ( array.length - i -1 ); j++){\r\n            \r\n          // Checking if the item at present iteration \r\n          // is greater than the next iteration\r\n\r\n          if(array[j]<=array[j+1]){\r\n            animations.push([-1,j, j+1]);\r\n            animations.push([-2,j, j+1]);\r\n            // animations.push([j,array[j]]);\r\n            // animations.push([j+1,array[j+1]]);\r\n          }\r\n\r\n          if(array[j] > array[j+1]){\r\n            animations.push([-1,j, j+1]);\r\n            animations.push([-2,j, j+1]);\r\n            // If the condition is true then swap them\r\n            animations.push([-1,j+1,j,array[j]]);\r\n            animations.push([-2,j,j+1,array[j+1]]);\r\n            animations.push([-2,j+1,j,array[j]]);\r\n            animations.push([-2,j,j+1]);\r\n            var temp = array[j];\r\n            array[j] = array[j + 1];\r\n            array[j+1] = temp;\r\n\r\n          }\r\n        }\r\n      }\r\n\r\n    return animations;\r\n}","import React from 'react';\r\nimport './Footer.css'\r\n\r\nfunction Footer(){\r\n    return (\r\n        <div className='footer'>\r\n            <h2>Made by Saurabh</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport './Header.css'\r\n\r\nfunction Header(){\r\n    return (\r\n        <div>\r\n            <h2>ALGO VISUALIZER</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import logo from './logo.svg';\nimport './App.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer.jsx';\nimport Footer from './SortingVisualizer/Footer';\nimport Header from './SortingVisualizer/Header';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <SortingVisualizer/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}